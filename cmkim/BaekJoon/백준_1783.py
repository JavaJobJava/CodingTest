#3번까지는 마음대로 움직일 수 있다. 그 이후엔 아직 이동하지 않은 방법을 이용해서 움직여야 한다.
#x,y 좌표 평면 기준 (2,1), (1,2), (2,-1), (1,-2) 이렇게 총 4가지의 이동 패턴
#x 좌표는 무조건 증가, y좌표의 변화를 생각하면서 수학적으로 접근할 수 있는가? (시간 복잡도가 상수단위)
# 3번 마음대로 움직이면 극단적인경우 (6,3), (3,6)까지 가능
# 6번까지 움직이면 모두 사용해야하니 이땐 (6,0) 모두 움직인 기준에서 추가적인 이동
# 최소 높이가 3은 되야 4번 이상움직일 수 있음

n, m = map(int, input().split()) #세로, 가로 길이 즉 y값, x값 순서로 주어짐

count = 1

if n == 1 : #높이가 1이면 아무것도 못움직임
    print(count)

elif n == 2 : #높이가 2면 위아래 1칸씩 왔다갔다 밖에 못함 즉 3번 이동이 최대. 즉 x값 기준 1,3,5,7 까지가 최대
    if m % 2 >= 1: #m이 홀수
        count += min(m/2, 3)
    else:          #m이 짝수
        count += min(m/2-1, 3)
    print(int(count))

elif n >= 3 : #높이가 3이면 모든 이동방법이 가능해짐. 3번의 이동후 자유로움. 근데 3번이동에 제한이있다.
    if m < 7:
        count += min(3, m-1)
    else :
        count += m-3

    print(count)


